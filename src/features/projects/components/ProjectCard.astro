---
import { Image } from 'astro:assets'; 
import { ExternalLink, Code } from 'lucide-react'; 

import { buttonVariants } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardHeader, CardContent, CardFooter, CardTitle } from '@/components/ui/card';
import { useTranslations, type LanguageCode, defaultLanguage } from '@/i18n/ui';

// Props definition
type Props = {
  title: string;
  description: string;
  imageUrl?: ImageMetadata; 
  imageAltText: string; 
  projectUrl?: string; 
  codeUrl?: string; 
  tags?: Array<string>; 
};

const {
  title,
  description,
  imageUrl,
  imageAltText,
  projectUrl,
  codeUrl,
  tags = [], 
} = Astro.props;

const lang = Astro.currentLocale as LanguageCode | undefined ?? defaultLanguage;
const t = useTranslations(lang, 'homePage'); 
---

<Card className="flex flex-col h-full hover:shadow-xl transition-shadow duration-300 overflow-hidden pt-0">

  {/* Image Section - Placed directly in Card, can be adjusted */}
  {imageUrl ? (
    <Image src={imageUrl} alt={imageAltText} class="w-full max-h-48 object-cover" width={400} height={200} densities={[1, 1.5, 2]} quality="mid" />
  ) : (
    <div class="w-full h-48 bg-muted flex items-center justify-center border-b">
      <p class="text-sm text-muted-foreground">{imageAltText || 'Project image placeholder'}</p>
    </div>
  )}
  <CardHeader>
    <CardTitle className="text-xl group-hover:text-primary transition-colors line-clamp-1">
      {projectUrl ? <a href={projectUrl} target="_blank" rel="noopener noreferrer" class="hover:underline">{title}</a> : title}
    </CardTitle>
  </CardHeader>

  <CardContent className="flex-grow flex flex-col">
    <p class="text-muted-foreground text-sm mb-4 flex-grow min-h-[60px] line-clamp-2">
      {description}
    </p>
    {/* Tags Section, show only 5 tags */}
    {tags && tags.length > 0 && (
      <div class="mb-4 flex flex-wrap gap-2">
        {tags.slice(0, 4).map((tag) => (
          <Badge variant="secondary">{tag.charAt(0).toUpperCase() + tag.slice(1)}</Badge>
        ))}
        {tags.length > 4 && (
          <Badge variant="secondary">+ {tags.length - 4}</Badge>
        )}
      </div>
    )}
  </CardContent>

  <CardFooter className="pt-4 border-t border-dashed flex flex-col sm:flex-row gap-3 mt-auto">
    {projectUrl && (
      <a
        href={projectUrl}
        target="_blank"
        rel="noopener noreferrer"
        class={buttonVariants({ variant: 'default', size: 'sm' }) + ' flex-1'}
      >
        <ExternalLink className="mr-2 size-4" />
        {t('projectCardViewProject')}
      </a>
    )}
    {codeUrl && (
      <a
        href={codeUrl}
        target="_blank"
        rel="noopener noreferrer"
        class={buttonVariants({ variant: 'outline', size: 'sm' }) + ' flex-1'}
      >
        <Code className="mr-2 size-4" />
        {t('projectCardViewCode')}
      </a>
    )}
  </CardFooter>
</Card>
