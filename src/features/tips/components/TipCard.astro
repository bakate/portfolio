---
import { Badge } from '@/components/ui/badge';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { useTranslations, type LanguageCode } from '@/i18n/ui';
import { formatDate } from '@/lib/utils';

import type { CollectionEntry } from 'astro:content';
import { getRelativeLocaleUrl } from 'astro:i18n';
import { ChevronRight } from 'lucide-react';

interface Props {
  tip: CollectionEntry<'tips'>;
  lang: LanguageCode;
}

const { tip, lang } = Astro.props;
const t = useTranslations(lang, 'tipsPage');
---

<Card
  className="group bg-card border border-border/50 rounded-xl hover:shadow-lg hover:border-primary/20 transition-all duration-300 grid grid-rows-subgrid row-span-5 h-full relative overflow-hidden"
>
  <!-- Badge TIP -->
  <div class="absolute top-4 right-4 z-10">
    <Badge variant="outline">ðŸ’¡ TIP</Badge>
  </div>
  <CardHeader className="pb-4 row-span-2 flex flex-col justify-between">
    <CardTitle
      className="text-xl font-semibold group-hover:text-primary transition-colors pr-12"
    >
      <a
        href={getRelativeLocaleUrl(lang, `/tips/${tip.id}/`)}
        class="hover:underline"
      >
        {tip.data.title}
      </a>
    </CardTitle>

    <div class="flex items-center gap-3 text-xs text-muted-foreground pt-2">
      <time datetime={tip.data.pubDate.toISOString()}>
        {formatDate(tip.data.pubDate, lang)}
      </time>
      {
        tip.data.tags && tip.data.tags.length > 0 && (
          <>
            <span class="w-1 h-1 bg-muted-foreground rounded-full" />
            <span class="font-medium text-primary">{tip.data.tags[0]}</span>
          </>
        )
      }
    </div>
  </CardHeader>

  <CardContent className="pt-0 pb-4 row-span-2">
    <CardDescription
      className="mb-4 text-sm text-foreground/80 line-clamp-3 leading-relaxed"
    >
      {tip.data.description}
    </CardDescription>

    {
      tip.data.codePreview ? (
        <div class="bg-muted/50 rounded-lg p-3 mb-4 border border-border/30">
          <code class="text-xs font-mono text-foreground/90 break-all">
            {tip.data.codePreview}
          </code>
        </div>
      ) : (
        <div class="h-12" />
      )
    }
  </CardContent>

  <CardFooter className="pt-4 border-t border-border/50 row-span-1">
    <div class="flex items-center justify-between w-full">
      <a
        href={getRelativeLocaleUrl(lang, `/tips/${tip.id}/`)}
        class="flex items-center text-sm font-medium text-primary hover:text-primary/80 transition-colors group/link"
      >
        {t('readTip')}
        <ChevronRight
          className="ml-1 size-4 transition-transform group-hover/link:translate-x-0.5"
        />
      </a>

      {/* difficulty */}
      {
        tip.data.difficulty ? (
          <Badge variant={'secondary'}>{tip.data.difficulty}</Badge>
        ) : null
      }
    </div>
  </CardFooter>

  <!-- Effet hover subtil -->
  <div
    class="absolute inset-0 bg-gradient-to-br from-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none rounded-xl"
  >
  </div>
</Card>
